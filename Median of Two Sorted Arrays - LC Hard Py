class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        nums = []
        m = len(nums1)
        n = len(nums2)
        i = 0
        j = 0
        while(i < m or j < n):
            if(j==n or i < m and nums1[i] < nums2[j]):
                nums.append(nums1[i])
                i = i + 1
            else:
                nums.append(nums2[j])
                j = j + 1
        k = len(nums)
        mid = int(k/2)
        print(nums, k, mid, k/2)
        if(k == mid*2):
            print("hi")
            return float(nums[mid] + nums[mid -  1]) / 2
        return nums[mid]
        
### Runtime: 100 ms, faster than 23.15% of Python online submissions for Median of Two Sorted Arrays.
### Memory Usage: 13.5 MB, less than 93.23% of Python online submissions for Median of Two Sorted Arrays.
### Next challenges:
